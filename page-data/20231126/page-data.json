{"componentChunkName":"component---src-templates-blog-post-js","path":"/20231126/","result":{"data":{"site":{"siteMetadata":{"title":"sunatter"}},"markdownRemark":{"id":"67f675d2-9daa-5127-9ecc-2a1ee4f354c9","excerpt":"はじめに こんにちは。技術書を眺めていると先に概念の説明がありますよね。 なんとなく実際の動作（詳細）を先にもってきてみました。という思いつきです。 このネタには Rust…","html":"<h1>はじめに</h1>\n<p>こんにちは。技術書を眺めていると先に概念の説明がありますよね。</p>\n<p>なんとなく実際の動作（詳細）を先にもってきてみました。という思いつきです。</p>\n<p>このネタには <a href=\"https://www.rust-lang.org/\">Rust</a> が丁度良さそうなので題材にしてみようと思います。</p>\n<p>題して「出力結果から言えそうなこと <strong>だけ</strong> を並べてみる」です。内容は「<a href=\"#%E5%8F%82%E7%85%A7%E5%85%88%E3%81%AE%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">参照先のアドレスを確認してみる</a>」とします。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">⚠️\n- 基本的な内容だけを取り扱います。\n- あくまで出力結果から言えそうなことだけを並べる試みです。\n- 本筋から逸れる内容はラベル「脱線」を付与します。</code></pre></div>\n<h1>参照先のアドレスを確認してみる</h1>\n<h2>複数回実行してみる</h2>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:p}\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1回目: 0x7ffd06da7efc\n2回目: 0x7ffe55b8093c\n3回目: 0x7fff544f9ddc\n4回目: 0x7ffd67085b9c\n...\nN回目: 0x7ff........c</code></pre></div>\n<ul>\n<li>アドレスは16進数（<code class=\"language-text\">0x...</code>）で出力される。</li>\n<li>実行ごとにアドレスが変化している。\n<ul>\n<li>アドレスは実行時に決まる。</li>\n</ul>\n</li>\n<li>アドレスの前半（<code class=\"language-text\">7ff</code>）と末尾（例: <code class=\"language-text\">c</code>）は常に同じ。\n<ul>\n<li>脱線: 変数（<code class=\"language-text\">x</code>）の型を変更すると末尾が変化する。</li>\n</ul>\n</li>\n</ul>\n<h2>ブロック（<code class=\"language-text\">{}</code>）で囲ってみる</h2>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1: {:p}\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2: {:p}\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1回目:\n  1: 0x7ffc98e4d1b4\n  2: 0x7ffc98e4d1b0\n2回目:\n  1: 0x7ffc358c56b4\n  2: 0x7ffc358c56b0\n3回目:\n  1: 0x7ffc78ce2604\n  2: 0x7ffc78ce2600\n4回目:\n  1: 0x7ffffd718bd4\n  2: 0x7ffffd718bd0\n...\nN回目:\n  1: 0x7ff........4\n  2: 0x7ff........0</code></pre></div>\n<ul>\n<li>アドレスの前半（<code class=\"language-text\">7ff</code>）と末尾（例: <code class=\"language-text\">4</code>,<code class=\"language-text\">0</code>）は常に同じ。\n<ul>\n<li>脱線: 変数（<code class=\"language-text\">x</code>）の型を変更すると末尾の組み合わせが変化する。</li>\n</ul>\n</li>\n</ul>\n<h2>シャドーイングしてみる</h2>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1: {:p}\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2: {:p}\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1回目:\n  1: 0x7ffd7f543f3c\n  2: 0x7ffd7f543f8c\n2回目:\n  1: 0x7fff4c8433bc\n  2: 0x7fff4c84340c\n3回目:\n  1: 0x7ffd5a10b2ec\n  2: 0x7ffd5a10b33c\n4回目:\n  1: 0x7ffe153097bc\n  2: 0x7ffe1530980c\n...\nN回目:\n  1: 0x7ff........c\n  2: 0x7ff........c</code></pre></div>\n<ul>\n<li>変数を宣言（<code class=\"language-text\">let</code>）することで新たな領域（アドレス）が確保される。</li>\n<li>アドレスの前半（<code class=\"language-text\">7ff</code>）と末尾（例: <code class=\"language-text\">c</code>）は常に同じ。\n<ul>\n<li>脱線: 変数（<code class=\"language-text\">x</code>）の型を変更すると末尾が変化する。</li>\n</ul>\n</li>\n</ul>\n<h3>脱線: ミュータブルな変数に再代入してもアドレスは変化しない</h3>\n<p>変数を宣言（<code class=\"language-text\">let</code>）していないので同じアドレスになります。</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1: {:p}\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2: {:p}\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1回目:\n  1: 0x7ffefa40fe74\n  2: 0x7ffefa40fe74\n2回目:\n  1: 0x7ffc1722a334\n  2: 0x7ffc1722a334</code></pre></div>\n<h3>脱線: シャドーイング後に1番目の変数（アドレス）を参照する</h3>\n<p>不変参照によって実現できそうです。</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> x_pointer <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 不変参照</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1: {}, {:p}\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2: {}, {:p}\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 1番目のxを参照する</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3: {}, {:p}\"</span><span class=\"token punctuation\">,</span> x_pointer<span class=\"token punctuation\">,</span> x_pointer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// x_pointer自体のアドレス</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4: {:p}\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x_pointer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 1番目のxの値を計算に使用</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5: {}\"</span><span class=\"token punctuation\">,</span> x <span class=\"token operator\">+</span> x_pointer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1: 1, 0x7fffe12419c4\n2: 2, 0x7fffe1241a2c\n3: 1, 0x7fffe12419c4\n4: 0x7fffe12419c8\n5: 3</code></pre></div>\n<ul>\n<li>参考: <a href=\"https://doc.rust-jp.rs/book-ja/ch04-02-references-and-borrowing.html\">4.2. 参照と借用</a>\n<ul>\n<li>\n<blockquote>\n<p>複数の不変参照をすることは可能です。 データを読み込んでいるだけの人に、他人がデータを読み込むことに対して影響を与える能力はないからです。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<p>なんだか（信頼性を隠れ蓑に）難解なコードを生み出せそうな気がしてきました。</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> x_pointer <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> y_pointer <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1: {}, {:p}\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2: {}, {:p}\"</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3: {}, {:p}\"</span><span class=\"token punctuation\">,</span> x_pointer<span class=\"token punctuation\">,</span> x_pointer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4: {}, {:p}\"</span><span class=\"token punctuation\">,</span> y_pointer<span class=\"token punctuation\">,</span> y_pointer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> z <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5: {}, {:p}\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"6: {}, {:p}\"</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"7: {}, {:p}\"</span><span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> answer <span class=\"token operator\">=</span> z <span class=\"token operator\">-</span> x <span class=\"token operator\">-</span> <span class=\"token operator\">*</span>y <span class=\"token operator\">-</span> x_pointer <span class=\"token operator\">-</span> y_pointer<span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"8: {}\"</span><span class=\"token punctuation\">,</span> answer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1: 1, 0x7fffd7a69438\n2: 2, 0x7fffd7a6943c\n3: 2, 0x7fffd7a6943c\n4: 1, 0x7fffd7a69438\n5: 2, 0x7fffd7a6943c\n6: 2, 0x7fffd7a695a0\n7: 7, 0x7fffd7a695b4\n8: 0</code></pre></div>\n<h2>関数を呼んでみる</h2>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1: {}, {:p}\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2: {}, {:p}\"</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">no_return</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">no_return</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3: {}, {:p}\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4: {}, {:p}\"</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1回目:\n  1: 1, 0x7ffc47b6b1c4\n  2: Hello, 0x7ffc47b6b1c8\n  3: 1, 0x7ffc47b6b014\n  4: Hello, 0x7ffc47b6b290\n2回目:\n  1: 1, 0x7ffcc62bdd44\n  2: Hello, 0x7ffcc62bdd48\n  3: 1, 0x7ffcc62bdb94\n  4: Hello, 0x7ffcc62bde10\n3回目:\n  1: 1, 0x7fff7a97dab4\n  2: Hello, 0x7fff7a97dab8\n  3: 1, 0x7fff7a97d904\n  4: Hello, 0x7fff7a97db80\n4回目:\n  1: 1, 0x7ffedee6c3b4\n  2: Hello, 0x7ffedee6c3b8\n  3: 1, 0x7ffedee6c204\n  4: Hello, 0x7ffedee6c480\n...\nN回目:\n  1: 1, 0x7ff........4\n  2: Hello, 0x7ff........8\n  3: 1, 0x7ff........4\n  4: Hello, 0x7ff........0</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">::</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1: {}, {:p}\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2: {}, {:p}\"</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">no_return</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">no_return</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3: {}, {:p}\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4: {}, {:p}\"</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1回目:\n  1: 1, 0x7ffe1936d95c\n  2: Hello, 0x7ffe1936d960\n  3: 1, 0x7ffe1936d7a8\n  4: Hello, 0x7ffe1936d7b0\n2回目:\n  1: 1, 0x7ffdc9b674bc\n  2: Hello, 0x7ffdc9b674c0\n  3: 1, 0x7ffdc9b67308\n  4: Hello, 0x7ffdc9b67310\n3回目:\n  1: 1, 0x7ffdfe37e7ec\n  2: Hello, 0x7ffdfe37e7f0\n  3: 1, 0x7ffdfe37e638\n  4: Hello, 0x7ffdfe37e640\n4回目:\n  1: 1, 0x7fffe7cdf64c\n  2: Hello, 0x7fffe7cdf650\n  3: 1, 0x7fffe7cdf498\n  4: Hello, 0x7fffe7cdf4a0\n...\nN回目:\n  1: 1, 0x7ff........c\n  2: Hello, 0x7ff........0\n  3: 1, 0x7ff........8\n  4: Hello, 0x7ff........0</code></pre></div>\n<h1>・・・おっと、</h1>\n<p>きりがないですね。いくらでも「脱線」できそうなので、ここまでにしておきます。</p>\n<p>本記事が目的としていた試みはとりあえず満たせたかと思います。それでは。</p>","frontmatter":{"title":"20231126","date":"November 26, 2023","description":null}},"previous":{"fields":{"slug":"/20231119/"},"frontmatter":{"title":"20231119"}},"next":null},"pageContext":{"id":"67f675d2-9daa-5127-9ecc-2a1ee4f354c9","previousPostId":"38900656-e4b7-5d6c-83ae-5b661f85ff8f","nextPostId":null}},"staticQueryHashes":["2841359383"],"slicesMap":{}}