{"componentChunkName":"component---src-templates-blog-post-js","path":"/20231119/","result":{"data":{"site":{"siteMetadata":{"title":"sunatter"}},"markdownRemark":{"id":"38900656-e4b7-5d6c-83ae-5b661f85ff8f","excerpt":"「イマドキ」は Visual Studio Code で GitHub Copilot を動かすのだそうです。（え？）Vim に引き篭もるばかりでは健康にも悪そうです。 というわけでちょっと外の空気でも・・おっと、大きな壁が。導入の段階において Windows や macOS…","html":"<p>「イマドキ」は <a href=\"https://code.visualstudio.com/\">Visual Studio Code</a> で <a href=\"https://marketplace.visualstudio.com/items?itemName=GitHub.copilot\">GitHub Copilot</a> を動かすのだそうです。（え？）<a href=\"https://www.vim.org/\">Vim</a> に引き篭もるばかりでは健康にも悪そうです。</p>\n<p>というわけでちょっと外の空気でも・・おっと、大きな壁が。導入の段階において <a href=\"https://www.microsoft.com/en-us/windows\">Windows</a> や <a href=\"https://www.apple.com/jp/macos/\">macOS</a> であればスムーズに構築できるのですが、悲しいかな <a href=\"https://nixos.org/\">NixOS</a> だとそうもいきません。</p>\n<p><a href=\"https://nixos.org/\">NixOS</a> 以外のユーザから見たら「なんでこんなに長いの（ｗ）」と笑っていただけるような内容になったかもしれません。（基本的には私向けの記録です。）</p>\n<p>さて本当かどうか、さっそく <a href=\"https://github.com/microsoft/vscode\">Visual Studio Code</a>（以下OSS版）を入れてみましょう。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ nix-shell <span class=\"token parameter variable\">-p</span> vscode\nerror:\n       … <span class=\"token keyword\">while</span> calling the <span class=\"token string\">'derivationStrict'</span> <span class=\"token builtin class-name\">builtin</span>\n\n         at /builtin/derivation.nix:9:12: <span class=\"token punctuation\">(</span>source not available<span class=\"token punctuation\">)</span>\n\n       …\n\n       a<span class=\"token punctuation\">)</span> To temporarily allow unfree packages, you can use an environment variable\n          <span class=\"token keyword\">for</span> a single invocation of the nix tools.\n\n            $ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">NIXPKGS_ALLOW_UNFREE</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n\n        Note: For <span class=\"token variable\"><span class=\"token variable\">`</span>nix shell<span class=\"token variable\">`</span></span>, <span class=\"token variable\"><span class=\"token variable\">`</span>nix build<span class=\"token variable\">`</span></span>, <span class=\"token variable\"><span class=\"token variable\">`</span>nix develop<span class=\"token variable\">`</span></span> or any other Nix <span class=\"token number\">2.4</span>+\n        <span class=\"token punctuation\">(</span>Flake<span class=\"token punctuation\">)</span> command, <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token parameter variable\">--impure</span><span class=\"token variable\">`</span></span> must be passed <span class=\"token keyword\">in</span> order to <span class=\"token builtin class-name\">read</span> this\n        environment variable.\n\n       b<span class=\"token punctuation\">)</span> For <span class=\"token variable\"><span class=\"token variable\">`</span>nixos-rebuild<span class=\"token variable\">`</span></span> you can <span class=\"token builtin class-name\">set</span>\n         <span class=\"token punctuation\">{</span> nixpkgs.config.allowUnfree <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n       <span class=\"token keyword\">in</span> configuration.nix to override this.\n\n       Alternatively you can configure a predicate to allow specific packages:\n         <span class=\"token punctuation\">{</span> nixpkgs.config.allowUnfreePredicate <span class=\"token operator\">=</span> pkg: builtins.elem <span class=\"token punctuation\">(</span>lib.getName pkg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span>\n             <span class=\"token string\">\"vscode\"</span>\n           <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span>\n\n       c<span class=\"token punctuation\">)</span> For <span class=\"token variable\"><span class=\"token variable\">`</span>nix-env<span class=\"token variable\">`</span></span>, <span class=\"token variable\"><span class=\"token variable\">`</span>nix-build<span class=\"token variable\">`</span></span>, <span class=\"token variable\"><span class=\"token variable\">`</span>nix-shell<span class=\"token variable\">`</span></span> or any other Nix <span class=\"token builtin class-name\">command</span> you can <span class=\"token function\">add</span>\n         <span class=\"token punctuation\">{</span> allowUnfree <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n       to ~/.config/nixpkgs/config.nix.</code></pre></div>\n<p>いきなり面を食らったかと思います。<a href=\"https://nixos.org/\">NixOS</a> には「Unfreeなパッケージは事前の許可が必要」という仕組みが存在するためです。</p>\n<p>とりあえず「<code class=\"language-text\">NIXPKGS_ALLOW_UNFREE</code>」を利用してみます。<code class=\"language-text\">shell.nix</code>を用意しておけば以下で成立すると思います。（<code class=\"language-text\">shellHook</code>に<code class=\"language-text\">code</code>を入れておくと起動の手間を省けます。）</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ <span class=\"token assign-left variable\">NIXPKGS_ALLOW_UNFREE</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> nix-shell</code></pre></div>\n<p><code class=\"language-text\">code</code>で起動できたと思います。さてここでユーザ空間に正式に導入するか考えてみます。</p>\n<p>ユーザ空間に導入するメリットを列挙してみます。</p>\n<ul>\n<li><a href=\"https://nixos.org/manual/nix/stable/command-ref/nix-shell\">nix-shell</a> を起動する必要が無い。</li>\n<li>事前に「<code class=\"language-text\">NIXPKGS_ALLOW_UNFREE</code>」を考慮しなくて良い。</li>\n<li><code class=\"language-text\">Extensions</code>をNix側で管理できる。（有効なパッケージが存在する場合に限る。）</li>\n</ul>\n<p>書いた手前、最後はあまりオススメできません。理由は以下の通りです。</p>\n<ul>\n<li>欲しい<code class=\"language-text\">Extension</code>のパッケージが存在しない場合がある。</li>\n<li>機能の一部が正常に動作しない場合がある。（<code class=\"language-text\">github.copilot.suggest.terminal.command</code>など。）</li>\n</ul>\n<p>また <a href=\"https://github.com/microsoft/vscode\">Visual Studio Code</a> 内の<code class=\"language-text\">Extensions</code>から管理する場合は素直に<code class=\"language-text\">vscode</code>（パッケージ）を利用した方が良いです。（同期は「<code class=\"language-text\">Settings Sync</code>」に任せるのが手かもしれません。）私の環境では以下の結果になりました。</p>\n<ul>\n<li><code class=\"language-text\">vscode</code>: <code class=\"language-text\">Extension</code>をインストールでき、正常に動作する。</li>\n<li><code class=\"language-text\">vscode-with-Extensions</code>: <code class=\"language-text\">Extension</code>をインストールできない。</li>\n<li><code class=\"language-text\">vscodium</code>: <code class=\"language-text\">Extension</code>をインストールできるが、機能の一部が正常に動作しない。（またログイン状態を維持できないかも。）</li>\n</ul>\n<p>まあ折角なのでユーザ空間に導入しましょう。最初のエラーを回避するには、<code class=\"language-text\">flake.nix</code>などに以下の宣言を加えます。</p>\n<div class=\"gatsby-highlight\" data-language=\"nix\"><pre class=\"language-nix\"><code class=\"language-nix\">nixpkgs<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>allowUnfree <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>参考: <a href=\"https://github.com/nix-community/home-manager/issues/463\">How to use unfree software declaratively with nixos module? #463</a></li>\n</ul>\n<p>Unfreeなパッケージが<code class=\"language-text\">vscode</code>だけの場合、ここは口惜しいポイント（デメリット）かと思います。しかしトレードオフだと考えるしかなさそうです。</p>\n<p>この残念な気持ちを少し緩和するために「Unfreeという目印」が欲しいところです。方法はいくつか考えられます。</p>\n<p>私の場合は<code class=\"language-text\">vscode</code>を宣言しているディレクトリの名称を<code class=\"language-text\">unfree-vscode</code>としました。<code class=\"language-text\">unfree</code>を先頭にしたのはソートを考慮してのことです。</p>\n<p><code class=\"language-text\">vscode-extensions.github.copilot</code>を宣言すれば<code class=\"language-text\">Extensions</code>に追加されますが、先の理由から実施しません。<a href=\"https://github.com/microsoft/vscode\">Visual Studio Code</a> を開いて「<code class=\"language-text\">Sign in to GitHub</code>」を押下します。</p>\n<p>ウェブブラウザに遷移して <a href=\"https://github.com/\">GitHub</a> の認証画面が表示されれば問題ありません。が、何の反応も無い（ウェブブラウザが起動しない）パターンもあると思います。</p>\n<p>この問題は環境によって様々なため、可能性が高そうな解決策をご紹介します。デスクトップ環境に <a href=\"https://www.freedesktop.org/wiki/\">Freedesktop.org</a> が絡んでいる場合「<code class=\"language-text\">xdg</code>」が関係している可能性が高いです。</p>\n<p>というのも <a href=\"https://github.com/microsoft/vscode\">Visual Studio Code</a> は <a href=\"https://www.freedesktop.org/wiki/\">Freedesktop.org</a> による <a href=\"https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html\">XDG Base Directory</a> に沿っているようです。したがって <a href=\"https://www.freedesktop.org/wiki/Software/xdg-utils/\">xdg-utils</a> によって解決されるという道理です。</p>\n<ul>\n<li>参考: <a href=\"https://github.com/Microsoft/vscode/issues/3884\">Revisit VS Code folder structure for app data, settings, extensions #3884</a></li>\n</ul>\n<p><code class=\"language-text\">xdg-utils</code>を導入し「デフォルトのブラウザ」を表示してみます。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ xdg-settings get default-web-browser\nchromium-browser.desktop</code></pre></div>\n<p>正しく表示されない場合、ウェブブラウザから設定しますが、コマンドも用意されています。</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$ xdg-settings <span class=\"token builtin class-name\">set</span> default-web-browser brave-browser.desktop</code></pre></div>\n<p>参考: <a href=\"https://ja.linux-console.net/?p=10194\">Linuxでブラウザ環境変数を設定する方法</a></p>\n<p>なぜ <a href=\"https://www.mozilla.org/en-US/firefox/new/\">Firefox</a>（<code class=\"language-text\">firefox.desktop</code>）を例に出さないのかと思われたかもしれません。どうやら <a href=\"https://github.com/microsoft/vscode\">Visual Studio Code</a> は <a href=\"https://www.chromium.org/Home/\">Chromium</a> の <a href=\"https://chromium.googlesource.com/chromium/src/+/lkgr/components/os_crypt/\">OS Crypt</a>（モジュール）を使っているからだそうです。</p>\n<ul>\n<li>参考: <a href=\"https://code.visualstudio.com/docs/editor/settings-sync#_linux\">Settings Sync#Linux</a></li>\n</ul>\n<p>これで「<code class=\"language-text\">Sign in to GitHub</code>」からウェブブラウザ（<a href=\"https://github.com/\">GitHub</a> の認証画面）に遷移できるようになったかと思います。</p>\n<p><a href=\"https://github.com/\">GitHub</a> へログイン後、<a href=\"https://github.com/microsoft/vscode\">Visual Studio Code</a> に戻るとエラーが出るかもしれません。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">An OS keyring couldn't be identified for storing the\nencryption related data in your current desktop\nenvironment.\n\nOpen the troubleshooting guide to address this or you can use weaker\nencryption that doesn't use the OS keyring.</code></pre></div>\n<p>キーリング（例: <a href=\"https://wiki.gnome.org/Projects/GnomeKeyring\">GNOME Keyring</a>）が機能していないからのようです。以下がヒントになると思います。</p>\n<ul>\n<li><a href=\"https://github.com/microsoft/vscode/issues/187338\">Linux: An OS keyring couldn't be identified for storing the encryption related data in your current desktop environment #187338</a></li>\n<li><a href=\"https://code.visualstudio.com/docs/editor/settings-sync#_troubleshooting-keychain-issues\">Settings Sync#Troubleshooting keychain issues</a></li>\n<li><a href=\"https://code.visualstudio.com/docs/editor/settings-sync#_recommended-configure-the-keyring-to-use-with-vs-code\">Settings Sync#(recommended) Configure the keyring to use with VS Code</a></li>\n</ul>\n<p>キーリング周りをスタートラインから詳解すると大変なことになりますので簡単（詳細な設定内容は省略）に。ミニマルな例として <a href=\"https://www.passwordstore.org/\">pass</a>（<code class=\"language-text\">password-store</code>）および <a href=\"https://wiki.gnome.org/Projects/Libsecret\">libsecret</a>（<code class=\"language-text\">pass-secret-service</code>）を有効にし、<code class=\"language-text\">~/.vscode/argv.json</code>（<a href=\"https://vscodium.com/\">VSCodium</a> の場合は<code class=\"language-text\">~/.vscode-oss/argv.json</code>）に<code class=\"language-text\">\"password-store\": \"gnome\"</code>（<code class=\"language-text\">code --password-store=\"gnome\"</code>の永続化）を加えると良さそうです。<code class=\"language-text\">argv.json</code>への適用は以下が参考になると思います。</p>\n<ul>\n<li><a href=\"https://github.com/microsoft/vscode/issues/187338#issuecomment-1714813468\">Linux: An OS keyring couldn't be identified for storing the encryption related data in your current desktop environment #187338#issuecomment-1714813468</a></li>\n</ul>\n<p>「<code class=\"language-text\">Use weaker encryption</code>」で先に進むことはできますが「キーリングが使えていない状態」ということに留意しておく必要があります。</p>\n<p><a href=\"https://github.com/features/copilot\">GitHub Copilot</a> のアクセス権が無い場合はエラーが出ます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">No access to GitHub Copilot found. You are currently logged in as &lt;username>.</code></pre></div>\n<p>これは「<code class=\"language-text\">Signup for GitHub Copilot</code>」から画面（ウェブブラウザ）の案内に従えば <a href=\"https://github.com/features/copilot\">GitHub Copilot</a> のアクセス権を取得できると思います。それでも失敗する場合は再ログインで解消するかもしれません。</p>\n<ul>\n<li>参考: <a href=\"https://github.com/orgs/community/discussions/28455\">Your GitHub token is invalid. Please sign out from your GitHub account using VSCode UI and try again. #28455</a></li>\n</ul>\n<p>お疲れ様でした。これでようやく「イマドキ」に到達ですね。</p>\n<p>ちょっと試すだけのつもりが、なんだか長旅になってしまいました。しばらく動かしてみて、フリートライアル終了後の対応を考えたいと思います。</p>\n<p>ということで、よっこらしょっと。</p>\n<ul>\n<li><a href=\"https://github.com/github/copilot.vim\">Copilot.vim</a></li>\n</ul>","frontmatter":{"title":"20231119","date":"November 19, 2023","description":null}},"previous":{"fields":{"slug":"/20231118/"},"frontmatter":{"title":"20231118"}},"next":null},"pageContext":{"id":"38900656-e4b7-5d6c-83ae-5b661f85ff8f","previousPostId":"8e6232e6-5428-5dfc-b8ae-b50013d6912b","nextPostId":null}},"staticQueryHashes":["2841359383"],"slicesMap":{}}